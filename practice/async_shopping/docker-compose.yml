version: '3.8'

volumes:
  payments_postgres_data:
  orders_postgres_data:
 
services:
  payments_db:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_DB: payments
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - payments_postgres_data:/var/lib/postgresql/data
    networks:
      - kafka-net   
      
  orders_db:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_DB: orders
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"
    volumes:
      - orders_postgres_data:/var/lib/postgresql/data
    networks:
      - kafka-net   
  
  zookeeper:   # нужен для Kafka (внешний сервис координации для брокеров)
    image: bitnami/zookeeper:3.8
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - kafka-net

  kafka:
    image: bitnami/kafka:3.3
    container_name: kafka
    ports:
      - "29092:29092"   # порт для общения с кафкой снаружи
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181   # подключение Zookeeper
      - KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092,EXTERNAL://0.0.0.0:29092   # с каких адрессов будут обращаться к кафке + классификация данных соединений
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:29092   # адресса, которые кафка отдаёт (рекламирует) клиентам	
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT   # "тип слушателя":"протокол безопасности который будет использоваться"
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT   # тип слушателя, который будет использоваться для общения между брокерами внитри кластера
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true   # при обращении к топику, автоматически создаёт его, если он не существует
    depends_on:
      - zookeeper
    networks:
      - kafka-net
      
  kafka-ui: # ui интерфейс для kafka
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8085:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local   # имя kafka-кластера, который отображается в веб-интерфейсе kafka ui
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    depends_on:
      - kafka
    networks:
      - kafka-net
 
  payments_service:
    container_name: payments-service
    restart: unless-stopped
    build: payments_service
    ports:
      - "8080:8080"
    depends_on:
      - payments_db
      - kafka
    environment:
      # меняем localhost на имя контейнера в котором база развёрнута
      SPRING_DATASOURCE_URL: 'jdbc:postgresql://payments_db:5432/payments'
    networks:
      - kafka-net
      
  orders_service:
    container_name: orders-service
    restart: unless-stopped
    build: orders_service
    ports:
      - "8081:8081"
    depends_on:
      - orders_db
      - payments_service
      - kafka
    environment:как запушить изменения из одной ветки в другую
      # меняем localhost на имя контейнера в котором база развёрнута
      SPRING_DATASOURCE_URL: 'jdbc:postgresql://orders_db:5432/orders'
    networks:
      - kafka-net

  api_getaway:
    container_name: api-getaway
    restart: unless-stopped
    build: api_getaway
    ports:
      - "8082:8082"
    depends_on:
      - payments_service
      - orders_service
    networks:
      - kafka-net
      
networks:
  kafka-net:
    driver: bridge

